<?php
namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\Trackimo;
use Location\Coordinate;
use Location\Distance\Vincenty;
use App\Models\Device;
use App\Models\History;
use App\Models\Vehicle;
use Log;
use Illuminate\Support\Carbon;

class UpdateMiles extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'batch:update';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Call external API and update miles';

    private function updateHistories(Vehicle $vehicle) {
        Log::debug("Processing vehicle: {$vehicle->id}, device_id: {$vehicle->device_id}");
        Log::debug("Start of updateHistories for vehicle: {$vehicle->id}");
        $now = Carbon::now();
        Log::debug("After Carbon::now() for vehicle: {$vehicle->id}");
        $device = $vehicle->device;
        Log::debug("After device object access for vehicle: {$vehicle->id}. Device ID: {$device->id}, Status: {$device->status}");

        if (!$device) {
            Log::warning("Device not found for vehicle: {$vehicle->id} with device_id: {$vehicle->device_id}. Skipping this vehicle.");
            return;
        }
        if ($device->status === 'deleted') { // 厳密な比較に変更
            Log::debug("Device status is 'deleted' for vehicle: {$vehicle->id}. Skipping.");
            return;
        }
        Log::debug("After device status check for vehicle: {$vehicle->id}. Device status is not 'deleted'.");

        Log::debug("Processing dates for vehicle: {$vehicle->id}");
        $oil = null;
        if (!empty($vehicle->oil_date)) {
            try {
                $oil = strtotime($vehicle->oil_date);
            } catch (\Throwable $e) {
                Log::error("Error processing oil_date for vehicle {$vehicle->id}: {$e->getMessage()}");
            }
        }
        Log::debug("strtotime(oil_date) result: " . ($oil === false || $oil === null ? 'false/null' : $oil));

        $tire = null;
        if (!empty($vehicle->tire_date)) {
            try {
                $tire = strtotime($vehicle->tire_date);
            } catch (\Throwable $e) {
                Log::error("Error processing tire_date for vehicle {$vehicle->id}: {$e->getMessage()}");
            }
        }
        Log::debug("strtotime(tire_date) result: " . ($tire === false || $tire === null ? 'false/null' : $tire));

        $battery = null;
        if (!empty($vehicle->battery_date)) {
            try {
                $battery = strtotime($vehicle->battery_date);
            } catch (\Throwable $e) {
                Log::error("Error processing battery_date for vehicle {$vehicle->id}: {$e->getMessage()}");
            }
        }
        Log::debug("strtotime(battery_date) result: " . ($battery === false || $battery === null ? 'false/null' : $battery));

        if ($oil === false || $tire === false || $battery === false) {
            Log::error("strtotime returned false for one of the dates. Halting further processing for this vehicle.");
            return;
        }

        Log::debug("Processing mileage for vehicle: {$vehicle->id}");
        $oil_meter = isset($vehicle->oil_mileage) && !empty($vehicle->oil_mileage) ? (float)$vehicle->oil_mileage * 1000.0 : 0.0;
        $tire_meter = isset($vehicle->tire_mileage) && !empty($vehicle->tire_mileage) ? (float)$vehicle->tire_mileage * 1000.0 : 0.0;
        $battery_meter = isset($vehicle->battery_mileage) && !empty($vehicle->battery_mileage) ? (float)$vehicle->battery_mileage * 1000.0 : 0.0;
        Log::debug("Calculated meters: oil_meter={$oil_meter}, tire_meter={$tire_meter}, battery_meter={$battery_meter}");

        Log::debug("Before History query for device: {$device->id}");
        $lastHist = History::where('device_id', $device->id)->latest('time')->first();
        Log::debug("After History query for device: {$device->id}. lastHist: " . ($lastHist ? "exists" : "null"));
        Log::debug("After lastHist query for vehicle: {$vehicle->id}");
        $attach_at = $vehicle->attach_at->getTimestamp();

        // Optimize $from calculation: use lastHist->time if available, otherwise attach_at
        $from = strtotime('today 14:00');
        Log::debug("Calculated $from timestamp: {$from}");

        $count = 0;
        $calc = new Vincenty();
        $lastLoc = empty($lastHist) ? false : new Coordinate($lastHist->lat, $lastHist->lng);

        $time = 0;
        $trackimo = app(Trackimo::class);
        Log::debug("Before getHistories call for vehicle: {$vehicle->id}");
        $to = strtotime('today 15:00');
        $histories = $trackimo->getHistories($device->id, $from, $to);
        Log::debug("Number of histories retrieved: " . count($histories));
        Log::debug("After getHistories call for vehicle: {$vehicle->id}");

        do {
            $count = 0;
            foreach($histories as $detail) {
                $count++;
                $loc = new Coordinate($detail['lat'], $detail['lng']);
                $dist = empty($lastLoc) ? 0 : $calc->getDistance($lastLoc, $loc);
                $lastLoc = $loc;

                $time = $detail['time'];
                $hist = new History([
                    'device_id' => $device->id,
                    'time' => Carbon::createFromTimestampUTC($time),
                    'lat' => $detail['lat'],
                    'lng' => $detail['lng'],
                    'dist' => $dist
                ]);
                $hist->save();
                Log::debug("Saved history: device_id={$hist->device_id}, time={$hist->time}, lat={$hist->lat}, lng={$hist->lng}, dist={$hist->dist}");

                if ($time >= $from) $from = $time + 1;
                if ($time > $attach_at) {
                    if ($oil && ($time > $oil)) $oil_meter += $dist;
                    if ($tire && ($time > $tire)) $tire_meter += $dist;
                    if ($battery && ($time > $battery)) $battery_meter += $dist;
                }
            }
        } while ($count);
        if ($oil && ($time > $oil)) $vehicle->oil_mileage = $oil_meter;
        if ($tire && ($time > $tire)) $vehicle->tire_mileage = $tire_meter;
        if ($battery && ($time > $battery)) $vehicle->battery_mileage = $battery_meter;
        $device->last_measure_at = $now;
        $device->save();
        $vehicle->save();
    }

    public function handle()
    {
        Log::debug("[Batch]UpdateMiles started.");
        $vehicles = Vehicle::all()->filter(function ($vehicle) { return isset($vehicle->device_id) && $vehicle->device_id !== null && $vehicle->device_id !== 0; });
        Log::debug("Number of vehicles after filter: " . count($vehicles));
        if ($vehicles->isEmpty()) {
            Log::debug("No vehicles to process after filtering.");
        }
        foreach($vehicles as $vehicle) try {
            $this->updateHistories($vehicle);
        } catch (\Throwable $e) {
            Log::error("updateHistories failed!(vehicle:{$vehicle->id}, device:{$vehicle->device_id})");
            Log::debug($e);
n        $endTime = microtime(true);
        $executionTime = ($endTime - $startTime);
        Log::debug("[Batch]UpdateMiles finished in " . $executionTime . " seconds.");
n        $endTime = microtime(true);
        $executionTime = ($endTime - $startTime);
        Log::debug("[Batch]UpdateMiles finished in " . $executionTime . " seconds.");
        }
    }
}